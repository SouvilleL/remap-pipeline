rule bowtie2:
    """
    This rule maps fq.gz to reference genome.
	NOTE : For paired-end data it only check if forward file is here !

    Required parameters:
        bowtie2 : parameters of bowtie2
		nb_thread : number of threads for bowtie2
			NOTE : MUST MATCH CLUSTER CONFIG !!
		index : index of reference genome

    Author: Jeanne ChÃ¨neby
    """
	input:
			forward = lambda wildcards : expand( os.path.join( PREPROCESSING_DIR, "trim_fastq", wildcards.replicat_name, "{trim_filename_forward}.fq.gz"), zip, trim_filename_forward = dict_replicat_trim_filename[ wildcards.replicat_name][ "trim_filename_forward"]),
	output:
			temp( os.path.join( PREPROCESSING_DIR, "sam", "{replicat_name}.sam"))
	singularity:
			config[ "singularity"][ "bowtie2"]
	resources:
			res=1
	log:
			os.path.join( PREPROCESSING_DIR, "sam", "log", "{replicat_name}.log")
	params:
			forward_trim_name = lambda wildcards : expand( os.path.join( PREPROCESSING_DIR, "trim_fastq", wildcards.replicat_name, "{trim_basename}"), zip, trim_basename = dict_replicat_trim_filename[ wildcards.replicat_name][ "trim_filename_forward"]),
			reverse_trim_name = lambda wildcards : expand( os.path.join( PREPROCESSING_DIR, "trim_fastq", wildcards.replicat_name, "{trim_basename}"), zip, trim_basename = dict_replicat_trim_filename[ wildcards.replicat_name][ "trim_filename_reverse"]),
			bowtie2 = config[ "bowtie2"][ "parameters"],
			nb_thread = config[ "bowtie2"][ "nb_thread"],
			index = config[ "genome"][ "index"],
			library_type = lambda wildcards : dict_replicat_trim_filename[wildcards.replicat_name][ 'run_type']
	shell: """
if [ {params.library_type} == SE ]
then
	bowtie2 {params.bowtie2} --threads {params.nb_thread} -U {input[0]} -x {params.index} 2>> {log}  > {output}
else
	bowtie2 {params.bowtie2} --threads {params.nb_thread} -1 {params.forward_trim_name}.fq.gz -2 {params.reverse_trim_name}.fq.gz -x {params.index} 2>> {log} > {output}
fi
"""
	# shell : """touch {output}"""
