rule macs2:
	input:
			# lambda wildcards : expand( os.path.join( BAM_DIR, "{replicat_name}.bam"), replicat_name = dict_experiment_chip_filename[wildcards.experiment_name]["all"]) if config[ "workflow_step"][ "remove_duplicate"] == "True" else expand( os.path.join( PREPROCESSING_DIR, "sort_bam", "{replicat_name}.bam"), replicat_name = dict_experiment_chip_filename[wildcards.experiment_name]["all"])
			lambda wildcards : expand( os.path.join( BAM_DIR, "{replicat_name}.bam"), replicat_name = dict_experiment_chip_filename[wildcards.experiment_name]["all"])
	output:
			os.path.join( PEAKCALLING_DIR, "{experiment_name}", "macs2", "{experiment_name}_peaks.narrowPeak")
	singularity:
			config[ "singularity"][ "macs2"]
	conda:
			config[ "conda"][ "macs2"]
	# benchmark:
	# 			os.path.join( PEAKCALLING_DIR, "{experiment_name}", "macs2", "bench", "{experiment_name}.bench")
	resources:
			res=1
	log:
			os.path.join( PEAKCALLING_DIR, "{experiment_name}", "macs2", "log", "{experiment_name}.log")
	params:
			outdir = os.path.join( PEAKCALLING_DIR, "{experiment_name}", "macs2"),
			outfile_name = "{experiment_name}",
			chip = lambda wildcards : expand( os.path.join( BAM_DIR, "{chip_name}.bam"), chip_name = dict_experiment_chip_filename[wildcards.experiment_name]["chip"])
			control = lambda wildcards : expand( os.path.join( BAM_DIR, "{chip_name}.bam"), chip_name = dict_experiment_chip_filename[wildcards.experiment_name]["control"])
			macs2 = config["macs2"][ "other"]

	shell: 	"""
if [ -n "{params.control}" ]
then
	macs2 callpeak -t {params.chip} -c {params.control} --outdir {params.outdir} --name {params.outfile_name} {params.macs2} 2> {log}
else
	macs2 callpeak -t {params.chip} --outdir {params.outdir} --name {params.outfile_name} {params.macs2} 2> {log}
fi
"""
	# shell : """touch {output}"""
