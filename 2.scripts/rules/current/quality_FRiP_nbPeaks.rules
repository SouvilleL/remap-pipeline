rule quality_FRiP_nbPeaks:
    input:
            # bam = lambda wildcards : expand( os.path.join( BAM_DIR, "{chip_name}.bam"), chip_name = dict_experiment_chip_filename[wildcards.experiment_name]["chip"]),
            bam = os.path.join( PREPROCESSING_DIR, "merge_bam", "{experiment_name}.bam"),
            peaks = os.path.join( PEAKCALLING_DIR, "{experiment_name}", "macs2", "{experiment_name}_peaks.narrowPeak"),
            nsc_rsc = os.path.join( PREPROCESSING_DIR, "NSC_RSC", "{experiment_name}.NSC_RSC")
    output:
            # temp( os.path.join( PREPROCESSING_DIR, "FRiP", "macs2_{experiment_name}.FRiP"))
            os.path.join( PREPROCESSING_DIR, "FRiP", "macs2_{experiment_name}.FRiP")
    singularity:
            config[ "singularity"][ "bedtools"]
    conda:
            config[ "conda"][ "bedtools"]
    resources:
            res=2
    log:
            os.path.join( PREPROCESSING_DIR, "FRiP", "log", "{experiment_name}_FRiP.log")
    params:
            bedtools_intersect = config[ "quality_FRiP"][ "bedtools-intersect"]
    shell:"""
        total_reads=$(cut -f2 {input.nsc_rsc})

        total_peaks_in_read=$(bedtools intersect {params.bedtools_intersect} -bed -u -a {input.bam} -b {input.peaks} | wc -l)

        FRiP=$(awk -v nr="$total_reads" -v ni="$total_peaks_in_read" "BEGIN{{print ni/nr * 100}}")

        total_peaks=$(wc -l < {input.peaks} )

        echo $FRiP\t$total_peaks > {output}
    """
